/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package ld2rdf */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "ld2rdf.go"

 #include "stdint.h"
 #include "stdlib.h"
 #include "dart_api_dl.h"
 void dart_PostString(Dart_Port_DL port, int64_t context, const char *message);
 Dart_Port_DL init_ReceivePort();

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// Initialize Dart SDK and returns native port ID for SendPort used by JsonToRdfSendString function.
extern GoInt64 JsonToRdfInitSendPort(GoInt64 api);

// Used internally to communicate between Dart and Go.
extern void JsonToRdfSendString(Dart_Port_DL port, GoInt64 context, GoInt64 message);

// NOTE: Since JsonToRdfMessageHandler is called from C code, it must be exported with a name
// but not intended to be called by user codes.
extern void JsonToRdfMessageHandler(Dart_Port_DL port, GoInt64 context, char* message);

// JSON-LD to RDF conversion running asynchronously using Dart's ReceivePort.
extern void JsonToRdfNormalizedAsyncPtr(GoInt64 port, GoInt64 context, GoInt64 jsonLd, GoUint8 useExternalDownloader);

#ifdef __cplusplus
}
#endif
